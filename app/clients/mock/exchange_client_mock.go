// Code generated by MockGen. DO NOT EDIT.
// Source: exchange_client.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExchangeClient is a mock of ExchangeClient interface
type MockExchangeClient struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeClientMockRecorder
}

// MockExchangeClientMockRecorder is the mock recorder for MockExchangeClient
type MockExchangeClientMockRecorder struct {
	mock *MockExchangeClient
}

// NewMockExchangeClient creates a new mock instance
func NewMockExchangeClient(ctrl *gomock.Controller) *MockExchangeClient {
	mock := &MockExchangeClient{ctrl: ctrl}
	mock.recorder = &MockExchangeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExchangeClient) EXPECT() *MockExchangeClientMockRecorder {
	return m.recorder
}

// GetRate mocks base method
func (m *MockExchangeClient) GetRate(arg0 context.Context, arg1, arg2 string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", arg0, arg1, arg2)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate
func (mr *MockExchangeClientMockRecorder) GetRate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockExchangeClient)(nil).GetRate), arg0, arg1, arg2)
}
